package routines;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */


public class CodiceFiscaleToDate {


	private static final Map<Character, Integer> cfMonts = new HashMap<Character, Integer>();

	static {
		cfMonts.put('A', 0);
		cfMonts.put('B', 1);
		cfMonts.put('C', 2);
		cfMonts.put('D', 3);

		cfMonts.put('E', 4);
		cfMonts.put('H', 5);
		cfMonts.put('L', 6);
		cfMonts.put('M', 7);

		cfMonts.put('P', 8);
		cfMonts.put('R', 9);
		cfMonts.put('S', 10);
		cfMonts.put('T', 11);
	}




	public static Date codiceFiscaleToDate(String cf) {
		try {
			String codedDoB = cf.substring(6, 11);

			int y2 = Integer.parseInt(codedDoB.substring(0, 2));
			Calendar dob = Calendar.getInstance();
			dob.set(Calendar.HOUR_OF_DAY, dob.getActualMinimum(Calendar.HOUR_OF_DAY));
			dob.set(Calendar.MINUTE, dob.getActualMinimum(Calendar.MINUTE));
			dob.set(Calendar.SECOND, dob.getActualMinimum(Calendar.SECOND));
			dob.set(Calendar.MILLISECOND, dob.getActualMinimum(Calendar.MILLISECOND));

			int currentYear2 = dob.get(Calendar.YEAR) % 2000;
			y2 += y2 < currentYear2 ? 2000 : 1900;

			int day = Integer.parseInt(codedDoB.substring(3, 5));
			day -= day > 31 ? 40 : 0;

			dob.set(Calendar.DAY_OF_MONTH, day);
			dob.set(Calendar.MONTH, cfMonts.get(codedDoB.charAt(2)));
			dob.set(Calendar.YEAR, y2);

			return dob.getTime();
		}
		catch (Exception e) {
			return null;
		}
	}
}
